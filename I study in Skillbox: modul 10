{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Введите день недели: среда\n",
      "Номер дня недели:  3\n"
     ]
    }
   ],
   "source": [
    "### Задние 1\n",
    "# Напишите программу,\n",
    "# которая принимает от пользователя день недели в виде строки и выводит его номер на экран.\n",
    "# \n",
    "# Пример:\n",
    "# Введите день недели: вторник\n",
    "# Номер дня недели: 2\n",
    "\n",
    "day = input(\"Введите день недели: \")\n",
    "all_day = (\"понедельник\",\"вторник\",\"среда\",\"четверг\",\"пятница\",\"суббота\",\"воскресенье\")\n",
    "number = 0\n",
    "for word in all_day:\n",
    "    number += 1\n",
    "    if word == day:\n",
    "        break     \n",
    "print(\"Номер дня недели: \",number)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "крикни пират: Карамба\n",
      "крикни пират: Карамба\n",
      "крикни пират: \n",
      "крикни пират: Карамба\n",
      "крикни пират: Карамба\n",
      "крикни пират: Карамба\n",
      "крикни пират: Карамба\n",
      "крикни пират: Карамба\n",
      "крикни пират: Карамба\n",
      "крикни пират: Карамба\n",
      "Из 10 человек на борт попадет:  9\n"
     ]
    }
   ],
   "source": [
    "## Задание 2 \n",
    "#Старому капитану необходимо пополнить команду.\n",
    "# Но попадут на его корабль только достойные! \n",
    "# Он отобрал 10 человек и те, кто из них крикнет слово “Карамба”, попадут на борт.\n",
    "# \n",
    "# Пользователь вводит 10 слов. \n",
    "# \n",
    "# Напишите программу,\n",
    "# которая определяет, сколько из них совпадают со словом “Карамба”.\n",
    "\n",
    "main_word = \"Карамба\"\n",
    "number = 0 \n",
    "for word in range(10):\n",
    "    question = input(\"крикни пират: \")\n",
    "    if question == main_word:\n",
    "        number+=1\n",
    "print(\"Из 10 человек на борт попадет: \",number)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Введите текст: Приве*т как дела\n",
      "Символ ‘*’ стоит на позиции 6\n"
     ]
    }
   ],
   "source": [
    "## Задание 3\n",
    "# При передаче сообщений в одном мессенджере иногда возникают неполадки\n",
    "# и в сообщение попадает лишний символ - звёздочка.\n",
    "# Пользователям это изрядно надоело, и они начали просто уходить в другие мессенджеры.\n",
    "# Хотя одному пользователю стало интересно, на каких обычно позициях появляется эта звёздочка.\n",
    "# \n",
    "# Пользователь вводит строку,\n",
    "# в которой встречается символ “*” ровно один раз. \n",
    "# \n",
    "# Напишите программу,\n",
    "# которая определяет порядковый номер этого символа в строке.\n",
    "# \n",
    "# Пример:\n",
    "# Введите текст: Пр*ивет как дела\n",
    "# Символ ‘*’ стоит на позиции 3\n",
    "\n",
    "text = input(\"Введите текст: \")\n",
    "summ = 0\n",
    "for symbol in text: \n",
    "    summ += 1\n",
    "    if symbol == \"*\":\n",
    "         break\n",
    "print(\"Символ ‘*’ стоит на позиции\",summ)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Введите кол-во рядов: 5\n",
      "Введите кол-во сидений в ряде: 7\n",
      "Введите кол-во метров между рядами: 3\n",
      "Сцена\n",
      "======= *** =======\n",
      "======= *** =======\n",
      "======= *** =======\n",
      "======= *** =======\n",
      "======= *** =======\n"
     ]
    }
   ],
   "source": [
    "### Задание 4 \n",
    "# Планируется построить театр под открытым небом,\n",
    "# но для начала нужно хотя бы примерно понять сколько должно быть рядов,\n",
    "# сидений в них и какое лучше сделать расстояние между рядами.\n",
    "#\n",
    "# Напишите программу,\n",
    "# которая получает на вход кол-во рядов, сидений и свободных метров между рядами,\n",
    "# а затем выводит примерный макет театра на экран.\n",
    "\n",
    "# Сцена\n",
    "# Введите кол-во рядов: 5\n",
    "# Введите кол-во сидений ряду: 7\n",
    "# Введите кол-во метров между рядами: 3\n",
    "#\n",
    "# ======= *** =======\n",
    "# ======= *** =======\n",
    "# ======= *** =======\n",
    "# ======= *** =======\n",
    "# ======= *** =======\n",
    "\n",
    "row = int(input(\"Введите кол-во рядов: \"))\n",
    "seating = int(input(\"Введите кол-во сидений в ряде: \"))\n",
    "meters = int(input(\"Введите кол-во метров между рядами: \"))\n",
    "print(\"Сцена\")\n",
    "for pik in range(row):\n",
    "    print(\"=\" * seating, \"*\" * meters,\"=\" * seating)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "w\n",
      "Марсоход находится на позиции 8 11 введите команду:\n",
      "w\n",
      "Марсоход находится на позиции 8 12 введите команду:\n",
      "w\n",
      "Марсоход находится на позиции 8 13 введите команду:\n",
      "a\n",
      "Марсоход находится на позиции 7 13 введите команду:\n",
      "d\n",
      "Марсоход находится на позиции 8 13 введите команду:\n",
      "s\n",
      "Марсоход находится на позиции 8 12 введите команду:\n",
      "s\n",
      "Марсоход находится на позиции 8 11 введите команду:\n",
      "stop\n",
      "Программа остановленна\n"
     ]
    }
   ],
   "source": [
    "###Задание 5\n",
    "# К роботу Валли отправили ещё одного робота Билли.\n",
    "# Это его первый поход на Марс,\n",
    "# поэтому он тестируется в прямоугольном помещении размером 15 на 20 метров.\n",
    "# Марсоход высаживается в центре комнаты (в точке 8, 10),\n",
    "# после чего управление им передаётся оператору - пользователю вашей программы.\n",
    "# \n",
    "# Программа спрашивает\n",
    "# в какую сторону оператор хочет направить робота:\n",
    "# север (клавиша W),\n",
    "# юг (клавиша S),\n",
    "# запад (клавиша A)\n",
    "# или восток (клавиша D).\n",
    "# \n",
    "# Оператор делает выбор,\n",
    "# марсоход перемещается на 1 метр в эту сторону и программа сообщает новую позицию марсохода.\n",
    "# Если марсоход упёрся в стену,\n",
    "# то он не должен пытаться перемещаться в сторону стены, в этом случае его позиция не меняется.\n",
    "# \n",
    "# Пример:\n",
    "# \n",
    "# [Программа]: Марсоход находится на позиции 6, 19, введите команду:\n",
    "# [Оператор]: A\n",
    "# [Программа]: Марсоход находится на позиции 5, 19, введите команду:\n",
    "# [Оператор]: W\n",
    "# [Программа]: Марсоход находится на позиции 5, 20, введите команду:\n",
    "# [Оператор]: W\n",
    "# [Программа]: Марсоход находится на позиции 5, 20, введите команду:\n",
    "\n",
    "square = 10\n",
    "square_2 = 8\n",
    "while square != 25:\n",
    "    action = input()\n",
    "    if action == \"w\" or action == \"W\":\n",
    "        square += 1\n",
    "    if square == 21:\n",
    "        square -=1\n",
    "    if action == \"s\" or action == \"S\":\n",
    "        square -= 1\n",
    "    if square == -1:\n",
    "        square += 1\n",
    "    if action == \"a\" or action == \"A\":\n",
    "        square_2 -= 1\n",
    "    if square_2 == -1:\n",
    "        square_2 += 1\n",
    "    if action == \"d\" or action == \"D\":\n",
    "        square_2 += 1\n",
    "    if square_2 == 16:\n",
    "        square_2 -= 1\n",
    "    if action == \"stop\":\n",
    "        print(\"Программа остановленна\")\n",
    "        break\n",
    "    print(\"Марсоход находится на позиции\",square_2,square, \"введите команду:\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 202,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Введите строку: ssbbbsssbcssssssbb\n",
      "Самая длинная последовательность:  6\n"
     ]
    }
   ],
   "source": [
    "##Задание 6\n",
    "# Два сотрудника спецслужб переписываются необычным шифром.\n",
    "# Каждую букву они шифруют в виде строки,\n",
    "# внутри которой есть длинная последовательность букв “s”, \n",
    "# а длина самой длинной - это и есть номер буквы алфавита, которую хотят отправить.\n",
    "# \n",
    "# Напишите программу,\n",
    "# которая получает на вход строку,\n",
    "# подсчитывает в ней самую длинную последовательность подряд идущих букв “s” и выводит ответ на экран.\n",
    "# \n",
    "# Пример:\n",
    "# Введите строку: ssbbbsssbc\n",
    "# Самая длинная последовательность: 3\n",
    "\n",
    "text = input('Введите строку: ')\n",
    "text += ''\n",
    "count_s = 0\n",
    "letter = 0\n",
    "\n",
    "for symbol in text:\n",
    "    if symbol == 's':\n",
    "        letter += 1\n",
    "    else:\n",
    "        if letter > count_s:\n",
    "            count_s = letter\n",
    "            letter = 0\n",
    "print('Самая длинная последовательность: ', count_s)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Введите текст: Меня зовут Петр\n",
      "Большее слово: Петр\n",
      "Кол-во символов: 4\n"
     ]
    }
   ],
   "source": [
    "###Задание 7 \n",
    "# Паоло изучает русский язык: занимается по учебникам, читает книги, слушает музыку.\n",
    "# Особенно Паоло понравилась книга “Преступление и наказание”.\n",
    "# И ему стало интересно,\n",
    "# какое можно найти самое длинное слово в этой книге, чтобы потом сравнить его с аналогом на своём языке.\n",
    "# \n",
    "# Напишите программу,\n",
    "# которая получает на вход текст и находит длину самого длинного слова в нём.\n",
    "# Слова в тексте разделяются одним пробелом.\n",
    "# \n",
    "# Пример:\n",
    "# Введите текст: Меня зовут Петр\n",
    "# Длина самого длинного слова: 5\n",
    "\n",
    "text = input(\"Введите текст: \")\n",
    "word = ''\n",
    "higher_number = 0\n",
    "bigger_word = ''\n",
    "for symbol in text+\" \":\n",
    "    if symbol == ' ':\n",
    "        if len(word) > higher_number:\n",
    "            bigger_word = word\n",
    "        word = ''\n",
    "    else:\n",
    "        word += symbol\n",
    "print (\"Большее слово:\", bigger_word)\n",
    "print (\"Кол-во символов:\", len(bigger_word))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Введите кол-во символов: 23 \n",
      "Введите кол-во восклицательных знаков: 8\n",
      "~~~~~~~!!!!!!!!~~~~~~~ "
     ]
    }
   ],
   "source": [
    "###Задание 8 \n",
    "# Нам нужно написать программу для печати важных объявлений.\n",
    "# Сверху объявления должен располагаться вот такой колонтитул:\n",
    "#  ~~~~~~~~~~!!!!!!~~~~~~~~~~\n",
    "# Восклицательные знаки всегда располагаются по центру строки,\n",
    "# причём в зависимости от важности объявления количество восклицательных знаков может быть разным.\n",
    "#\n",
    "# Напишите программу,\n",
    "# которая спрашивает у пользователя сначала общую длину колонтитула в символах,\n",
    "# потом желаемое количество восклицательных знаков,\n",
    "# после чего выводит на экран готовую строку.\n",
    "\n",
    "summ_symb = int(input(\"Введите кол-во символов: \"))\n",
    "summ_exclamation = int(input(\"Введите кол-во восклицательных знаков: \"))\n",
    "if summ_symb >  summ_exclamation:\n",
    "        number3 = summ_symb-summ_exclamation\n",
    "        number2 = number3//2\n",
    "        print(number2*\"~\"+summ_exclamation*\"!\"+number2*\"~\", end = \" \")\n",
    "else:\n",
    "    print(\"Восклицательных знаков больше чем кол-ва символов, поэтому:\",summ_exclamation*\"!\") "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "a\n",
      "a\n",
      "a\n",
      "a\n",
      "a\n",
      "a\n",
      "a\n",
      "a\n",
      "a\n",
      "b\n",
      "20\n"
     ]
    }
   ],
   "source": [
    "###задание 9 \n",
    "# Для коров есть 10 стойл.\n",
    "# В каждом стойле разные условия для животных, поэтому и молока они дают по-разному.\n",
    "# В первом стойле производят 2 литра в день,\n",
    "# во втором 4, \n",
    "# в третьем - 6, потом 8, 10, 12, 14, 16, 18, 20. \n",
    "# Но коровы стоят не во всех стойлах. \n",
    "# Свободные и занятые обозначаются строкой из букв a и b,\n",
    "# где a - свободное стойло, b - занятое.\n",
    "# \n",
    "# Пользователь вводит строку из 10 символов a и b.\n",
    "# Необходимо определить, сколько в итоге будет произведено молока за день.\n",
    "\n",
    "answer = input()\n",
    "number = 0\n",
    "for symbol in answer:\n",
    "    if symbol == \"a\":\n",
    "    for count in range(2,20+1,2): \n",
    "        if answer == \"b\": \n",
    "            number+=count\n",
    "        if answer == \"a\":\n",
    "            number+=0\n",
    "print(number)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "shacnidw\n",
      "sandwich\n"
     ]
    }
   ],
   "source": [
    "###задание 10 Из интернета \n",
    "# Секретное агентство «Super-Secret-no» решило\n",
    "# для шифрования переписки своих сотрудников использовать «метод бутерброда».\n",
    "# Сначала буквы слова нумеруются в таком порядке:\n",
    "# первая буква получает номер 1,\n",
    "# последняя буква - номер 2,\n",
    "# вторая – номер 3,\n",
    "# предпоследняя – номер 4, потом третья … и так для всех букв (см. рисунок).\n",
    "# Затем все буквы записываются в шифр в порядке своих номеров.\n",
    "# \n",
    "# Например, слово «sandwich» зашифруется в «shacnidw».\n",
    "# \n",
    "# К сожалению, программист «Super-Secret-no», написал только программу шифрования и уволился.\n",
    "# И теперь агенты не могут понять, что же они написали друг другу. Помогите им.\n",
    "# \n",
    "# Пример:\n",
    "# Введите зашифрованное сообщение: shacnidw\n",
    "# Расшифрованное сообщение: sandwich\n",
    "#          1   3   5   7   8   6   4   2\n",
    "# Слово: | s | a | n | d | w | i | c | h |\n",
    "#\n",
    "# Шифр:  | s | h | a | c | n | i | d | w |\n",
    "\n",
    "s, h, t = input(), '', ''\n",
    "for i in range(len(s)):\n",
    "    if i % 2: t = s[i] + t\n",
    "    else: h += s[i]\n",
    "print(h + t)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
